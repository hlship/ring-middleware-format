<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1424299597663">{:repl-history {:ide [], :local [&quot;(let [req {:body {:headers {\&quot;accept\&quot; \&quot;application/json\&quot;}}}\n        handler (-&gt; (constantly {:status 200\n                              :headers {}})\n                 wrap-restful-response)\n        resp (handler req)]\n    (is (= \&quot;application/json; charset=utf-8\&quot; (get-in resp [:headers \&quot;Content-Type\&quot;])))\n    (println \&quot;body=\&quot; (-&gt; resp :body slurp))\n    (is (nil? (:body resp))))&quot; &quot;\n(run-tests)&quot; &quot;(run-tests)&quot; &quot;(safe-restful-echo {:headers {\&quot;accept\&quot; \&quot;foo/bar\&quot;} :body \&quot;whatever\&quot;} )&quot; &quot;(safe-restful-echo {:headers {\&quot;accept\&quot; \&quot;foo/bar\&quot;}}  )\n\n&quot; &quot;(-&gt; \&quot;\&quot; .getBytes io/input-stream slurp)&quot; &quot;(get (safe-restful-echo {:status 200\n                                        :headers {\&quot;accept\&quot; \&quot;foo/bar\&quot;}\n                                        :body \&quot;\&quot;}) :status)&quot; &quot;(safe-restful-echo {:status 200\n                                        :headers {\&quot;accept\&quot; \&quot;foo/bar\&quot;}\n                                        :body \&quot;\&quot;})&quot; &quot;(make-encoder (fn [_] (throw (RuntimeException. \&quot;Memento mori\&quot;)))\n                                        \&quot;foo/bar\&quot;)&quot;], :remote []}}</component>
</project>